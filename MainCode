/*
Runtime 21 ms
Beats 5.11%

Memory 10.41 MB
Beats 9.68%

The code still needs improvement in both runtime and memory space 

*/

class Solution {
public:
    int maxFreqSum(string s) {
        //initialization of maps and final ints
        int vMax=0;
        int cMax=0;
        unordered_map<char,int> vowels;
        vowels['a'] = {0};
        vowels['e'] = {0};
        vowels['i'] = {0};
        vowels['o'] = {0};
        vowels['u'] = {0};

        unordered_map<char,int> cons;
        //starting while loop to traverse the given String s
        int i=0;
        while(i < s.length()){
            //this code is to iterate through the map to see if the letter is present, if it is ++
            //if the letter is not found in vowels, it will then check cons if it is then ++
            if(vowels.find(s[i])!=vowels.end()){
                cout << vowels.at(s[i]) << endl;
                vowels.at(s[i]) = vowels.at(s[i]) +1;
            }
            else{
                if(cons.find(s[i])!=cons.end()){
                    cons.at(s[i]) = cons.at(s[i]) +1;
                }
                else{
                    cons[s[i]]={1};
                }
            }
            i++;
        }
        //this will iterate to find the biggest vowel and biggest consonant, then add them in the return
        for(auto& [key, value]: vowels){
            if(vMax < value){
                vMax= value;
            }
        }
        for(auto& [key, value]: cons){
            if(cMax < value){
                cMax= value;
            }
        }
        return vMax+cMax;
    }
};






